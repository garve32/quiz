<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ict.quiz.web.admin.AdminMapper">

    <sql id="search">
        <!-- 카테고리 선택 시 필터 적용 -->
        <if test="category_id != null and category_id != ''">
            AND t1.category_id = #{category_id}
        </if>
        <!-- 제목 검색어가 있을 때 제목 LIKE 검색 -->
        <if test="searchKeyword != null and searchKeyword != ''">
            AND t1.text LIKE '%' || #{searchKeyword} || '%'
        </if>
    </sql>

    <select id="findAllQuestions" parameterType="QuestionPage" resultType="QuestionPage">
        select t1.id, t1.text, t1.image_name, t1.image, t1.seq, t1.use_yn, t1.category_id
             , t2.name as category_nm
          from question t1
               inner join category t2
                       on t2.id = t1.category_id
        where 1=1
          <include refid="search" />
         order by id
        LIMIT #{recordsPerPage} OFFSET #{pagination.firstRecordIndex}
    </select>

    <select id="findAllQuestionsCount" parameterType="QuestionPage" resultType="int">
        select count(*)
          from question t1
                inner join category t2
                on t2.id = t1.category_id
         where 1=1
        <include refid="search" />
    </select>

    <insert id="insertQuestion" parameterType="Question" useGeneratedKeys="true" keyProperty="id">
        insert into question (
            text, image_name, image, seq, use_yn, type, category_id
        )
        values (
            #{text}
            ,#{image_name}
            ,#{image}
            ,#{seq}
            ,#{use_yn}
            ,#{type}
            ,#{category_id}
            )
    </insert>

    <update id="updateQuestion" parameterType="Question">
        update question
        set text = #{text}
            , image_name = #{image_name}
            , image = #{image}
            , seq = #{seq}
            , use_yn = #{use_yn}
            , type = #{type}
            , category_id =#{category_id}
        where id = #{id}
    </update>

    <update id="updateQuestionNotFile" parameterType="Question">
        update question
        set text = #{text}
          , seq = #{seq}
          , use_yn = #{use_yn}
          , type = #{type}
          , category_id =#{category_id}
        where id = #{id}
    </update>

    <insert id="insertOption" parameterType="QuestionOption" useGeneratedKeys="true" keyProperty="id">
        insert into question_option (
            number, seq, text, correct_yn, del_yn, question_id
        ) values (
            #{number}
            ,#{seq}
            ,#{text}
            ,#{correct_yn}
            ,#{del_yn}
            ,#{question_id}
            )
    </insert>

    <update id="updateOption" parameterType="QuestionOption">
        update question_option
        set number = #{number}
            , seq = #{seq}
            , text = #{text}
            , correct_yn = #{correct_yn}
            , del_yn = #{del_yn}
            , question_id = #{question_id}
        where id = #{id}
    </update>

    <select id="findAllCategories" resultType="Category">
        select id, p_id, name, description, time_limit, question_cnt, logo_url
             , success_type, success_cnt, success_percent, use_yn, active_yn, seq
        from category
        order by seq, id
    </select>

    <select id="findCategories" resultType="Category">
        select id, p_id, name, description, time_limit, question_cnt, logo_url
             , success_type, success_cnt, success_percent, use_yn, active_yn, seq
        from category
        where use_yn = 'Y'
          and question_cnt > 0
        order by seq, id
    </select>

    <select id="findCategoryById" resultType="Category">
        select id, p_id, name, description, time_limit, question_cnt, logo_url
             , success_type, success_cnt, success_percent, use_yn, active_yn, seq
        from category
        where id = #{id}
    </select>
    <select id="findQuestionSelectStatsByCategory" resultType="QuestionStat">
        SELECT
            q.id   AS question_id,
            q.text AS question_text,
            COALESCE(COUNT(*) FILTER (WHERE q.id = q_ids.elem::bigint), 0) AS select_count,
            COALESCE(COUNT(*) FILTER (WHERE q.id = q_ids.elem::bigint AND corr.elem = '1'), 0) AS correct_count,
            CASE
                WHEN COALESCE(COUNT(*) FILTER (WHERE q.id = q_ids.elem::bigint), 0) > 0 THEN
                    ROUND(
                        (COALESCE(COUNT(*) FILTER (WHERE q.id = q_ids.elem::bigint AND corr.elem = '1'), 0)::numeric
                            * 100.0)
                        / COALESCE(COUNT(*) FILTER (WHERE q.id = q_ids.elem::bigint), 0), 2
                    )
                ELSE 0
            END AS correct_rate
        FROM question q
        LEFT JOIN user_question uq
               ON uq.category_id = q.category_id
        LEFT JOIN LATERAL unnest(string_to_array(uq.question_set, ',')) WITH ORDINALITY AS q_ids(elem, idx)
               ON TRUE
        LEFT JOIN LATERAL unnest(string_to_array(uq.correct_set, ',')) WITH ORDINALITY AS corr(elem, idx2)
               ON corr.idx2 = q_ids.idx
        WHERE q.category_id = #{categoryId}
        GROUP BY q.id, q.text
        ORDER BY select_count DESC, q.id
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="findQuestionSelectStatsCountByCategory" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM question q
        WHERE q.category_id = #{categoryId}
    </select>

    <select id="findCategorySummary" parameterType="long" resultType="CategorySummary">
        WITH uq AS (
            SELECT * FROM user_question WHERE category_id = #{categoryId}
        ),
        qcnt AS (
            SELECT COUNT(*) AS question_cnt FROM question WHERE category_id = #{categoryId}
        )
        SELECT
            (SELECT COUNT(*) FROM uq) AS attempts,
            (SELECT COUNT(*) FROM uq WHERE end_dt IS NOT NULL) AS completed,
            CASE WHEN (SELECT COUNT(*) FROM uq) > 0
                THEN ROUND(((SELECT COUNT(*) FROM uq WHERE end_dt IS NOT NULL)::numeric
                    * 100.0) / (SELECT COUNT(*) FROM uq), 2)
                ELSE 0 END AS completion_rate,
            (SELECT COUNT(*) FROM uq WHERE success_cd = 'S') AS success,
            CASE WHEN (SELECT COUNT(*) FROM uq) > 0
                THEN ROUND(((SELECT COUNT(*) FROM uq WHERE success_cd = 'S')::numeric
                    * 100.0) / (SELECT COUNT(*) FROM uq), 2)
                ELSE 0 END AS success_rate,
            (SELECT ROUND(AVG(accum_sec), 2) FROM uq) AS avg_seconds,
            (SELECT ROUND(AVG(accum_sec / NULLIF(qcnt.question_cnt, 0)), 2) FROM uq, qcnt) AS avg_seconds_per_question
    </select>

</mapper>