<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ict.quiz.api.user.QuestionApiMapper">

    <select id="findAllCategoryInfo" resultType="CategoryResDto">
        select id, p_id, name, description, time_limit, question_cnt
             , success_type, success_cnt, success_percent, use_yn
             , logo_url, active_yn
             , (select count(1) from question q where q.category_id = c.id and q.use_yn = 'Y') as pool_cnt
        from category c
        where use_yn = 'Y'
          and question_cnt > 0
        order by seq
    </select>


    <select id="pickRandomQuestion" parameterType="QuestionStartReqDto" resultType="UserQuestion">
        select #{user_id} as user_id
             , (select COALESCE(max(seq), 0) + 1
                from user_question
                where user_id = #{user_id}) as seq
             , category_id
--              , group_concat(id order by rand()) as question_set
             , STRING_AGG(id::text, ',' ORDER BY RANDOM()) as question_set
             , STRING_AGG('0', ',' ORDER BY id) as progress_set
             , STRING_AGG('0', ',' ORDER BY id) as answer_set
             , STRING_AGG('0', ',' ORDER BY id) as correct_set
             , CURRENT_TIMESTAMP AT TIME ZONE 'Asia/Seoul' as start_dt
        from (select category_id, id
              from question
              where category_id = #{category_id}
                and use_yn = 'Y'
              order by RANDOM()
                  limit #{question_cnt}) as t1
        group by category_id
    </select>

    <insert id="saveUserQuestion">
        insert into user_question (
            user_id, seq, category_id, question_set, progress_set, answer_set, correct_set, start_dt, end_dt
        )
        values (
        #{user_id}
        , #{seq}
        , #{category_id}
        , #{question_set}
        , #{progress_set}
        , #{answer_set}
        , #{correct_set}
        , #{start_dt}
        , #{end_dt}
        )
        <selectKey keyColumn="id" keyProperty="id" order="AFTER" resultType="UserQuestion">
            select id
            from user_question
            where user_id = #{user_id}
            and seq = #{seq}
        </selectKey>
    </insert>

    <select id="findById" resultType="Question">
        select id, text, image_name, image, seq, use_yn, type, category_id
        from question
        where id = #{id}
    </select>

    <select id="findByIds" resultType="Question">
        select id, text, image_name, image, seq, use_yn, type, category_id
        from question
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="findOptionByQuestionId" resultType="QuestionOption">
        select id, number, seq, text, correct_yn, question_id, del_yn
        from question_option
        where question_id = #{question_id}
          and del_yn != 'Y'
        order by RANDOM()
    </select>

    <select id="findOptionsByQuestionIds" resultType="QuestionOption">
        select id, number, seq, text, correct_yn, question_id, del_yn
        from question_option
        where question_id in
        <foreach collection="questionIds" item="qid" open="(" separator="," close=")">
            #{qid}
        </foreach>
          and del_yn != 'Y'
        order by question_id, seq
    </select>

    <update id="updateUserQuestion" parameterType="UserQuestionReqDto">
        update user_question
           set progress_set = #{progress_set}
             , answer_set = #{answer_set}
             , accum_sec = #{accum_sec}
         where id = #{id}
    </update>

    <update id="endUserQuestion" parameterType="UserQuestionReqDto">
        update user_question
        set progress_set = #{progress_set}
          , answer_set = #{answer_set}
          , correct_set = #{correct_set}
          , end_dt = CURRENT_TIMESTAMP AT TIME ZONE 'Asia/Seoul'
          , success_cd = #{success_cd}
          , accum_sec = #{accum_sec}
        where id = #{id}
    </update>

    <select id="findCorrectByQuestionId" resultType="string">
--         select group_concat(qo.id order by qo.id separator':')
        select STRING_AGG(qo.id::text, ':' ORDER BY qo.id)
        from question q
                 inner join question_option qo
                            on q.id = qo.question_id
                                and qo.correct_yn = 'Y'
        where q.id = #{question_id}
        group by q.id
    </select>

    <select id="findUserQuestionById" resultType="UserQuestionResDto">
        select id, user_id, seq, category_id, question_set, progress_set
             , answer_set, correct_set, start_dt, end_dt, success_cd
        from user_question
        where id = #{id}
    </select>

    <select id="getCategory" resultType="Category">
        select id, p_id, name, description, time_limit, question_cnt
        , success_type, success_cnt, success_percent, use_yn
        from category
        where id = #{category_id}
    </select>

    <select id="findExplanationsByQuestionIds" resultType="Explanation">
        select id, question_id, explanation_text, image_name, image, use_yn
        from question_explanation
        where question_id in
        <foreach collection="questionIds" item="qid" open="(" separator="," close=")">
            #{qid}
        </foreach>
          and use_yn = 'Y'
        order by question_id
    </select>


</mapper>